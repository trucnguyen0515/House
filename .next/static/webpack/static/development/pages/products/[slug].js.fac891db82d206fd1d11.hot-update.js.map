{"version":3,"file":"static/webpack/static/development/pages/products/[slug].js.fac891db82d206fd1d11.hot-update.js","sources":["webpack:///./src/pages/products/[slug].js"],"sourcesContent":["\n\n\nimport { withRouter, createRouter, useRouter } from \"next/router\";\nimport { Component } from \"react\";\nimport Layout1 from \"../../layouts/layout1\";\nimport MyRouter from \"../../const/routes\";\nimport { Breadcrumb, Row, Col } from \"antd\";\nimport Link from \"next/link\";\nimport { MyService, FuncService } from \"../../services/myService\";\n\n\n// data\nimport { dataCategories, dataProducts } from \"../../data/data\";\n\n\nimport CategoryComp from \"../../components/categoryComp\";\nimport ProductComp from \"../../components/productComp\";\nimport LoadingPage from \"../../components/SharedComp/LoadingPage\";\n\nexport async function getStaticPaths() {\n  const paths = dataCategories.map(data => `/products/${data.slug}`);\n  const paths2 = dataProducts.map(data => `/products/${data.slug}~${data.id}`);\n\n  return {\n    paths: [...paths, ...paths2],\n    fallback: false\n  };\n}\nexport async function getStaticProps({ params }) {\n  let breadcrumb = '', product = '', categoriesChild = '', categoriesChild_2 = '', productsChild = '', arrChild_1 = [], productDetail = '';\n\n  let dataCate = await getData(dataCategories, 400);\n\n  const arrStr = params.slug.split(\"~\");\n  let typeComp = arrStr.length === 1 ? 0 : 1\n  // 0 CategoryComp, 1 ProductComp\n  if (typeComp === 0) {\n    // Danh muc hien tai (F1)\n    product = FuncService.search(dataCate, \"slug\", arrStr[0]);\n    breadcrumb = FuncService.searchAll(dataCate, \"id\", product.breadcrumb);\n    // Danh Muc hien tai co danh sach san pham\n    if (product.typeShow === 3) {\n      let dataPro = await getData(dataProducts, 1);\n      productsChild = FuncService.find(dataPro, product.children, 'id');\n    }\n    // Danh Muc hien tai ko co danh sach san pham, chi co danh muc con\n    if (product.typeShow !== 3) {\n      // // Danh sach con cua danh muc hien tai (F2)\n      categoriesChild = product.children.length > 0 ? FuncService.find(dataCate, product.children, 'id') : '';\n    }\n    if (product.typeShow === 0) {\n      // // lay tat ca con cua danh sach con cua danh muc hien tai (F3)\n      categoriesChild.map((res, i) => res.children.length > 0 ? arrChild_1 = [...arrChild_1, ...res.children] : null)\n      arrChild_1 = MyService.dedup(arrChild_1);\n      categoriesChild_2 = FuncService.find(dataCate, arrChild_1, 'id');\n    }\n\n  }\n  if (typeComp === 1) {\n    let dataPro = await getData(dataProducts, 1);\n    productDetail = FuncService.search(dataPro, 'id', arrStr[1]);\n    product = FuncService.search(dataCate, 'id', productDetail.idParent);\n    breadcrumb = FuncService.searchAll(dataCate, 'id', product.breadcrumb)\n  }\n  return { props: { typeComp, breadcrumb, product, productsChild, categoriesChild, categoriesChild_2, productDetail, loading: false } };\n}\n\nconst getData = (data, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(data);\n    }, delay);\n  });\n};\n\n\nclass ProductsPosition extends Component {\n\n  static getDerivedStateFromProps(props, state) {\n    return { loading: state.loading }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.state.loading === true && prevState.loading === this.state.loading ? this.setState({ loading: this.props.loading }) : null\n  }\n\n\n  componentDidMount(){\n    // back browser\n    window.onpopstate = () => {\n      this.setState({loading:true})\n    }\n  }\n  componentWillUnmount(){\n    window.onpopstate = null;\n  }\n\n  state = {\n    loading: this.props.loading\n  }\n\n  renderBreadcrumb = () => {\n    const { typeComp, product, productDetail, breadcrumb } = this.props;\n    let listBreadcrum = [\n      {\n        name: \"All Products\",\n        href: MyRouter.Products.href,\n        as: \"\"\n      }\n    ];\n\n    if (typeComp === 0) {\n      if (breadcrumb.length > 0) {\n        for (let res of breadcrumb) {\n          listBreadcrum = [...listBreadcrum, {\n            name: res.name,\n            href: MyRouter.ProductDetail.href,\n            as: MyRouter.ProductDetail.as(res.slug)\n          }]\n        }\n      }\n      listBreadcrum = [...listBreadcrum, {\n        name: product.name,\n        href: this.props.router.pathname,\n        as: this.props.router.asPath\n      }]\n      console.log(listBreadcrum)\n    }\n    if (typeComp === 1) {\n      // console.log(\"product: \",product)\n      // console.log(\"productDetail: \",productDetail)\n      console.log(\"breadcrumb: \", breadcrumb);\n      for (let res of breadcrumb) {\n        listBreadcrum = [...listBreadcrum, {\n          name: res.name,\n          href: MyRouter.ProductDetail.href,\n          as: MyRouter.ProductDetail.as(res.slug)\n        }]\n      }\n      listBreadcrum = [...listBreadcrum, {\n        name: product.name,\n        href: MyRouter.ProductDetail.href,\n        as: MyRouter.ProductDetail.as(product.slug)\n      },\n      {\n        name: `MPN ${productDetail.id}`,\n        href: MyRouter.ProductsList.href,\n        as: MyRouter.ProductsList.as(productDetail.slug, productDetail.id)\n      }\n      ]\n    }\n\n\n    \n\n\n    return listBreadcrum.map((item, i) => {\n      return (\n        <Breadcrumb.Item key={i}>\n          {\n            i + 1 === listBreadcrum.length ?\n              <span className=\"fs-15\">{item.name}</span> :\n              <Link href={item.href} as={item.as}>\n                <span className=\"mylink fs-15\" onClick={() => this.setState({ loading: true })}>{item.name}</span>\n              </Link>\n\n          }\n        </Breadcrumb.Item>\n      );\n    });\n  };\n\n  render() {\n\n  \n\n    const { typeComp, product, categoriesChild, categoriesChild_2, productsChild, productDetail } = this.props;\n    const renderComp = typeComp === 0\n      ? <CategoryComp product={product} productsChild={productsChild} categoriesChild={categoriesChild} categoriesChild_2={categoriesChild_2} callback={(res) => {\n        this.setState({ loading: true })\n      }} />\n      : <ProductComp productDetail={productDetail} callback={(res) => {\n        this.setState({ loading: true })\n      }} />\n\n    return (\n      <Layout1>\n        <LoadingPage isLoading={this.state.loading}>\n          <div id=\"Products\">\n            <div className=\"wrapper\">\n              <div className=\"container\">\n                <Breadcrumb>{this.renderBreadcrumb()}</Breadcrumb>\n                {typeComp === 0 ?\n                  <h1 className=\"pb-25\">\n                    {product.name}\n                  </h1> : null\n                }\n              </div>\n            </div>\n            {renderComp}\n          </div>\n        </LoadingPage>\n      </Layout1>\n    );\n  }\n}\n\n\n\nexport default withRouter(ProductsPosition);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AA0DA;;;;;;;;;;;;;;;;AAoBA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAHA;AACA;AAMA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AAKA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;AAzFA;AACA;AAAA;AAAA;AACA;;;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AACA;AACA;AACA;;;AA6EA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;AA7HA;AACA;AAAA;AAAA;AACA;;;;AAJA;AACA;;AAmIA;;;;A","sourceRoot":""}