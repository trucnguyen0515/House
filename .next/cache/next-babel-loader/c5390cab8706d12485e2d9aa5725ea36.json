{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { withRouter, createRouter, useRouter } from \"next/router\";\nimport { Component } from \"react\";\nimport Layout1 from \"../../layouts/layout1\";\nimport MyRouter from \"../../const/routes\";\nimport { Breadcrumb, Row, Col } from \"antd\";\nimport Link from \"next/link\";\nimport { MyService, FuncService } from \"../../services/myService\"; // data\n\nimport { dataCategories, dataProducts } from \"../../data/data\";\nimport CategoryComp from \"../../components/ProductPage/categoryComp\";\nimport ProductComp from \"../../components/ProductPage/productComp\";\nimport LoadingPage from \"../../components/SharedComp/LoadingPage\";\nexport async function getStaticPaths() {\n  const paths = dataCategories.map(data => `${MyRouter.Products.href}/${data.slug}`);\n  const paths2 = dataProducts.map(data => `${MyRouter.Products.href}/${data.slug}~${data.id}`);\n  return {\n    paths: [...paths, ...paths2],\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  let breadcrumb = '',\n      product = '',\n      categoriesChild = '',\n      categoriesChild_2 = '',\n      productsChild = '',\n      arrChild_1 = [],\n      productDetail = '';\n  let dataCate = await getData(dataCategories, 400);\n  const arrStr = params.slug.split(\"~\");\n  let typeComp = arrStr.length === 1 ? 0 : 1; // 0 CategoryComp, 1 ProductComp\n\n  if (typeComp === 0) {\n    // Danh muc hien tai (F1)\n    product = FuncService.search(dataCate, \"slug\", arrStr[0]);\n    breadcrumb = FuncService.searchAll(dataCate, \"id\", product.breadcrumb); // Danh Muc hien tai co danh sach san pham\n\n    if (product.typeShow === 3) {\n      let dataPro = await getData(dataProducts, 1);\n      productsChild = FuncService.find(dataPro, product.children, 'id');\n    } // Danh Muc hien tai ko co danh sach san pham, chi co danh muc con\n\n\n    if (product.typeShow !== 3) {\n      // // Danh sach con cua danh muc hien tai (F2)\n      categoriesChild = product.children.length > 0 ? FuncService.find(dataCate, product.children, 'id') : [];\n    }\n\n    if (product.typeShow === 0) {\n      // // lay tat ca con cua danh sach con cua danh muc hien tai (F3)\n      categoriesChild.length > 0 ? categoriesChild.map((res, i) => res.children.length > 0 ? arrChild_1 = [...arrChild_1, ...res.children] : null) : null;\n      arrChild_1 = MyService.dedup(arrChild_1);\n      categoriesChild_2 = FuncService.find(dataCate, arrChild_1, 'id');\n    }\n  }\n\n  if (typeComp === 1) {\n    let dataPro = await getData(dataProducts, 1);\n    productDetail = FuncService.search(dataPro, 'id', arrStr[1]);\n    product = FuncService.search(dataCate, 'id', productDetail.idParent);\n    breadcrumb = FuncService.searchAll(dataCate, 'id', product.breadcrumb);\n  }\n\n  return {\n    props: {\n      typeComp,\n      breadcrumb,\n      product,\n      productsChild,\n      categoriesChild,\n      categoriesChild_2,\n      productDetail,\n      loading: false\n    }\n  };\n}\n\nconst getData = (data, delay) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(data);\n    }, delay);\n  });\n};\n\nclass ProductsPosition extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      loading: this.props.loading\n    });\n\n    _defineProperty(this, \"renderBreadcrumb\", () => {\n      const {\n        typeComp,\n        product,\n        productDetail,\n        breadcrumb\n      } = this.props;\n      let listBreadcrum = [{\n        name: \"All Products\",\n        href: MyRouter.Products.href,\n        as: \"\"\n      }];\n\n      if (typeComp === 0) {\n        if (breadcrumb.length > 0) {\n          for (let res of breadcrumb) {\n            listBreadcrum = [...listBreadcrum, {\n              name: res.name,\n              href: MyRouter.ProductDetail.href,\n              as: MyRouter.ProductDetail.as(res.slug)\n            }];\n          }\n        }\n\n        listBreadcrum = [...listBreadcrum, {\n          name: product.name,\n          href: this.props.router.pathname,\n          as: this.props.router.asPath\n        }];\n      }\n\n      if (typeComp === 1) {\n        // console.log(\"product: \",product)\n        // console.log(\"productDetail: \",productDetail)\n        for (let res of breadcrumb) {\n          listBreadcrum = [...listBreadcrum, {\n            name: res.name,\n            href: MyRouter.ProductDetail.href,\n            as: MyRouter.ProductDetail.as(res.slug)\n          }];\n        }\n\n        listBreadcrum = [...listBreadcrum, {\n          name: product.name,\n          href: MyRouter.ProductDetail.href,\n          as: MyRouter.ProductDetail.as(product.slug)\n        }, {\n          name: `MPN ${productDetail.id}`,\n          href: MyRouter.ProductsList.href,\n          as: MyRouter.ProductsList.as(productDetail.slug, productDetail.id)\n        }];\n      }\n\n      return listBreadcrum.map((item, i) => {\n        return __jsx(Breadcrumb.Item, {\n          key: i\n        }, i + 1 === listBreadcrum.length ? __jsx(\"span\", {\n          className: \"fs-15\"\n        }, item.name) : __jsx(Link, {\n          href: item.href,\n          as: item.as\n        }, __jsx(\"span\", {\n          className: \"mylink fs-15\",\n          onClick: () => this.setState({\n            loading: true\n          })\n        }, item.name)));\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      loading: state.loading\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.state.loading === true && prevState.loading === this.state.loading ? this.setState({\n      loading: this.props.loading\n    }) : null;\n  }\n\n  componentDidMount() {\n    // back browser\n    window.onpopstate = () => {\n      this.setState({\n        loading: true\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    window.onpopstate = null;\n  }\n\n  render() {\n    const {\n      typeComp,\n      product,\n      categoriesChild,\n      categoriesChild_2,\n      productsChild,\n      productDetail\n    } = this.props;\n    const renderComp = typeComp === 0 ? __jsx(CategoryComp, {\n      product: product,\n      productsChild: productsChild,\n      categoriesChild: categoriesChild,\n      categoriesChild_2: categoriesChild_2,\n      callback: res => {\n        this.setState({\n          loading: true\n        });\n      }\n    }) : __jsx(ProductComp, {\n      productDetail: productDetail,\n      callback: res => {\n        this.setState({\n          loading: true\n        });\n      }\n    });\n    return __jsx(Layout1, null, __jsx(LoadingPage, {\n      isLoading: this.state.loading\n    }, __jsx(\"div\", {\n      id: \"Products\"\n    }, __jsx(\"div\", {\n      className: \"wrapper\"\n    }, __jsx(\"div\", {\n      className: \"container\"\n    }, __jsx(Breadcrumb, null, this.renderBreadcrumb()), typeComp === 0 ? __jsx(\"h1\", {\n      className: \"pb-25\"\n    }, product.name) : null)), renderComp)));\n  }\n\n}\n\nexport default withRouter(ProductsPosition);","map":null,"metadata":{},"sourceType":"module"}